# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  vcXXX: vc142
  VSVER_RANGE: '[16.0,17.0)' 
  VS20YY: 2019  
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup_build_env:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 'Check and cleanup build folder'
        shell: bash
        run: |
          pwd
          ls -la ./
          echo cleanup...
          rm -rf ./* || true
          rm -rf ./.??* || true
          echo cleanup finished
          ls -Rla ./

      - name: Clone myself
        uses: actions/checkout@v4
        with:
          path: my-source
          ref: main

      ## CUDA SDK
      - name: Install CUDA SDK
        shell: pwsh
        run: |
          . "./my-source/helper/SetupCUDASDK.ps1" -cuda "11.8.0" -download "${{github.workspace}}/CUDA"
          $CUDA_PATH = "$env:CUDA_PATH" -replace "\\", "/"
          echo "CUDA_PATH=$CUDA_PATH" >> $env:GITHUB_ENV
          echo "envname_CUDA_PATH_VX_Y=$env:envname_CUDA_PATH_VX_Y" >> $env:GITHUB_ENV
          echo "$env:envname_CUDA_PATH_VX_Y=$env:CUDA_PATH" >> $env:GITHUB_ENV
          echo "CUDA_VER_0=$env:CUDA_VER_0" >> $env:GITHUB_ENV
          echo "CUDA_VER_1=$env:CUDA_VER_1" >> $env:GITHUB_ENV

      - name: ECHO CUDA_PATH
        shell: pwsh
        run: |
          echo "env.CUDA_PATH=${{ env.CUDA_PATH }}"
          echo "env.envname_CUDA_PATH_VX_Y=${{ env.envname_CUDA_PATH_VX_Y }}"

      ## MPI
      - name: download MSMPI setup
        shell: pwsh
        run: |
          $url="https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe"
          $list_split_url = $url -split '/'
          $filename = $list_split_url[-1]
          $dir_name_dl = "MPI"
          $outputPath = $dir_name_dl + "/" + $filename
          if (!(Test-Path -Path $dir_name_dl)) {
            New-Item -ItemType directory -Path $dir_name_dl
          }
          Invoke-WebRequest -Uri $url -OutFile $outputPath
  
      - name: Install mpiexec.exe
        working-directory: MPI
        run: |
          Start-Process -FilePath ".\msmpisetup.exe" -ArgumentList "-unattend -force" -Wait
 
      - name: download MSMPISDK setup
        shell: pwsh
        run: |
          $url="https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisdk.msi"
          $list_split_url = $url -split '/'
          $filename = $list_split_url[-1]
          $outputPath = "MPI/" + $filename
          Invoke-WebRequest -Uri $url -OutFile $outputPath

      - name: Install MPI SDK
        shell: pwsh
        working-directory: MPI
        run: |
          Start-Process -FilePath "c:\windows\system32\msiexec.exe" -ArgumentList "/i msmpisdk.msi /passive" -Wait

      ## 外部ライブラリ
      - name: Download and Extract Zip
        run: pwsh my-source/helper/DownloadExternalLibs.ps1

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: 'Check build folder'
        shell: bash
        run: |
          pwd
          ls -Rla ./
          
