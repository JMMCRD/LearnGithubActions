# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  vcXXX: vc142
  VSVER_RANGE: '[16.0,17.0)' 
  VS20YY: 2019

  VER_MPI: v10.1.1
  VER_CUDA: 11.8.0

  SOURCE_ROOT_DIR: "Externals"
  BUILD_ROOT_DIR: "build"
  INTSTALL_ROOT_DIR: "opt"
  DOWNLOAD_ROOT_DIR: "downloads"
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup_build_env:
    # The type of runner that the job will run on
    runs-on: windows-2019

    outputs:
      cuda_path: ${{ steps.install_cuda_sdk.outputs.CUDA_PATH}}


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 'Check and cleanup build folder'
        shell: bash
        run: |
          pwd
          ls -la ./
          echo cleanup...
          rm -rf ./* || true
          rm -rf ./.??* || true
          echo cleanup finished
          ls -Rla ./

      ## MPI
      - name: Restore Cache MPI
        id: cache_restore_mpi
        uses: actions/cache/restore@v4
        with:
          path: C:\Program Files\Microsoft MPI
          key: ${{ runner.os }}-mpi-${{ env.VER_MPI }}

      - name: download MSMPI setup
        if: steps.cache_restore_mpi.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url="https://github.com/microsoft/Microsoft-MPI/releases/download/${{ env.VER_MPI }}/msmpisetup.exe"
          $list_split_url = $url -split '/'
          $filename = $list_split_url[-1]
          $dir_name_dl = "MPI"
          $outputPath = $dir_name_dl + "/" + $filename
          if (!(Test-Path -Path $dir_name_dl)) {
            New-Item -ItemType directory -Path $dir_name_dl
          }
          Invoke-WebRequest -Uri $url -OutFile $outputPath
  
      - name: Install mpiexec.exe
        if: steps.cache_restore_mpi.outputs.cache-hit != 'true'
        working-directory: MPI
        run: |
          Start-Process -FilePath ".\msmpisetup.exe" -ArgumentList "-unattend -force" -Wait
 
      - name: download MSMPISDK setup
        if: steps.cache_restore_mpi.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url="https://github.com/microsoft/Microsoft-MPI/releases/download/${{ env.VER_MPI }}/msmpisdk.msi"
          $list_split_url = $url -split '/'
          $filename = $list_split_url[-1]
          $outputPath = "MPI/" + $filename
          Invoke-WebRequest -Uri $url -OutFile $outputPath

      - name: Install MPI SDK
        if: steps.cache_restore_mpi.outputs.cache-hit != 'true'
        shell: pwsh
        working-directory: MPI
        run: |
          Start-Process -FilePath "c:\windows\system32\msiexec.exe" -ArgumentList "/i msmpisdk.msi /passive" -Wait
    
      - name: Save Cache MPI
        if: steps.cache_restore_mpi.outputs.cache-hit != 'true'
        id: cache_save_mpi
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files\Microsoft MPI
          key: ${{ runner.os }}-mpi-${{ env.VER_MPI }}

      ## 自リポジトリ
      - name: Clone myself
        uses: actions/checkout@v4
        with:
          ref: main

      ## CUDA SDK
      - name: Restore Cache CUDA
        id: cache_restore_cuda
        uses: actions/cache/restore@v4
        with:
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA
          key: ${{ runner.os }}-cuda-${{ env.VER_CUDA }}

      - name: Set Cache Hit Environment Variable
        run: echo "CUDA_CACHE_HIT=${{ steps.cache_restore_cuda.outputs.cache-hit }}" >> $env:GITHUB_ENV

      - name: Install CUDA SDK
        id: install_cuda_sdk
        shell: pwsh
        run: |
          $skipInstall = if ("${{ env.CUDA_CACHE_HIT }}" -eq "true" ) { "true" } else { "false" }
          . "./.github/helper/SetupCUDASDK.ps1" -cuda ${{ env.VER_CUDA }} -download "${{github.workspace}}/CUDA" -skipInstall $skipInstall
          $CUDA_PATH = "$env:CUDA_PATH" -replace "\\", "/"
          echo "CUDA_PATH=$CUDA_PATH" >> $env:GITHUB_OUTPUT
          echo "envname_CUDA_PATH_VX_Y=$env:envname_CUDA_PATH_VX_Y" >> $env:GITHUB_ENV
          echo "$env:envname_CUDA_PATH_VX_Y=$env:CUDA_PATH" >> $env:GITHUB_ENV
          echo "CUDA_VER_0=$env:CUDA_VER_0" >> $env:GITHUB_ENV
          echo "CUDA_VER_1=$env:CUDA_VER_1" >> $env:GITHUB_ENV

      - name: Save Cache CUDA
        if: steps.cache_restore_cuda.outputs.cache-hit != 'true'
        id: cache_save_cuda
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA
          key: ${{ runner.os }}-cuda-${{ env.VER_CUDA }}

      - name: ECHO CUDA_PATH
        shell: pwsh
        run: |
          echo "env.CUDA_PATH=${{ env.CUDA_PATH }}"
          echo "env.envname_CUDA_PATH_VX_Y=${{ env.envname_CUDA_PATH_VX_Y }}"

  ## 外部ライブラリ
  ### EIGEN3
  build_eigen3:
    # The type of runner that the job will run on
    runs-on: windows-2019
    needs: [setup_build_env]

    outputs:
      cache_key: ${{ steps.set_props_eigen3.outputs.CACHE_KEY_NAME }}
      dirname: ${{ steps.set_props_eigen3.outputs.DIRNAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      ## 自リポジトリ
      - name: Clone myself
        uses: actions/checkout@v4
        with:
          ref: main

      ### MSBuild
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: ${{ env.VSVER_RANGE }}

      ## MPI
      - name: Restore Cache MPI
        id: cache_restore_mpi
        uses: actions/cache/restore@v4
        with:
          path: C:\Program Files\Microsoft MPI
          key: ${{ runner.os }}-mpi-${{ env.VER_MPI }}

      ## CUDA
      - name: Restore Cache CUDA
        id: cache_restore_cuda
        uses: actions/cache/restore@v4
        with:
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA
          key: ${{ runner.os }}-cuda-${{ env.VER_CUDA }}      

      ## Eigen3
      - name: Download Eigen3
        id: download_eigen3
        uses: ./.github/actions/download_if_necessary
        with:
          url: "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip"
          dest_dir: ${{ env.DOWNLOAD_ROOT_DIR }}

      - name: Set props Eigen3
        id: set_props_eigen3
        shell: pwsh
        run: |
          . ./.github/helper/CalcChecksumOfFiles.ps1
          $source_and_patches=@(
            "${{ steps.download_eigen3.outputs.downloaded_file }}",
            ""
          )
          $hash = CalcChecksumOfFiles( $source_and_patches )
          $dirname = "Eigen3"

          echo "DIRNAME=$dirname" >> $env:GITHUB_OUTPUT # スコープは yaml 全体
          echo "DIRNAME=$dirname" >> $env:GITHUB_ENV    # スコープはこの job のみ
          echo "CACHE_KEY_NAME=${{ runner.os }}-$dirname-$hash" >> $env:GITHUB_OUTPUT

      - name: Restore Cache Eigen3
        id: cache_restore_eigen3
        uses: actions/cache/restore@v4
        with:
          path: "${{github.workspace}}/${{ env.INTSTALL_ROOT_DIR }}/${{ env.DIRNAME }}"
          key: ${{ steps.set_props_eigen3.outputs.CACHE_KEY_NAME }}

      - name: Extract Eigen3
        if: steps.cache_restore_eigen3.outputs.cache-hit != 'true'
        id: extract_eigen3
        uses: ./.github/actions/extract_source
        with:
          compressed_source: "${{ steps.download_eigen3.outputs.downloaded_file }}"
          dir: ${{ env.DIRNAME }}
          root_dir: ${{ env.SOURCE_ROOT_DIR }}

      - name: "CMake Eigen"
        if: steps.cache_restore_eigen3.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          & "./.github/helper/RunCMAKE_vs20XX.ps1" "${{ env.VS20YY }}" "-S ${{ env.SOURCE_ROOT_DIR }}/${{ env.DIRNAME }} -B ${{ env.BUILD_ROOT_DIR }}/${{ env.DIRNAME }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{ env.INTSTALL_ROOT_DIR }}/${{ env.DIRNAME }}"         

      - name: "MsBuild Eigen"
        if: steps.cache_restore_eigen3.outputs.cache-hit != 'true'
        run: |
          msbuild -version
          msbuild ${{ env.BUILD_ROOT_DIR }}\${{ env.DIRNAME }}\INSTALL.vcxproj -t:rebuild -verbosity:diag -property:Configuration=Release

      - name: Save Cache Eigen3
        if: steps.cache_restore_eigen3.outputs.cache-hit != 'true'
        id: cache_save_eigen3
        uses: actions/cache/save@v4
        with:
          path: "${{github.workspace}}/${{ env.INTSTALL_ROOT_DIR }}/${{ env.DIRNAME }}"
          key: ${{ steps.set_props_eigen3.outputs.CACHE_KEY_NAME }}


      # - name: Restore Cache Downloads
      #   id: cache_restore_downloads
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: downloads
      #     key: ${{ runner.os }}-downloads-${{ hashFiles('**/DownloadExternalLibs.ps1')  }}

      # - name: Download and Extract Zip
      #   run: pwsh .github/helper/DownloadExternalLibs.ps1

      # - name: Save Cache Downloads
      #   if: steps.cache_restore_downloads.outputs.cache-hit != 'true'
      #   id: cache_save_downloads
      #   uses: actions/cache/save@v4
      #   with:
      #     path: downloads
      #     key: ${{ runner.os }}-downloads-${{ hashFiles('**/DownloadExternalLibs.ps1')  }}

      # # # Runs a single command using the runners shell
      # # - name: Run a one-line script
      # #   run: echo Hello, world!

      # - name: 'Check build folder'
      #   shell: bash
      #   run: |
      #     pwd
      #     ls -Rla ./
 
      - name: 'Check MPI folder'
        shell: bash
        run: |
          pwd
          ls -Rla "C:/Program Files/Microsoft MPI"

      - name: 'Check CUDA'
        shell: pwsh
        run: |
          $path_nvcc = "${{ needs.setup_build_env.outputs.cuda_path }}\bin\nvcc.exe"
          Write-Output "path_nvcc: " $path_nvcc
          Start-Process -FilePath $path_nvcc -ArgumentList "-V" -NoNewWindow -Wait

  build_pcl:
    # The type of runner that the job will run on
    runs-on: windows-2019
    needs: [setup_build_env, build_eigen3]

    steps:
      - name: Restore Cache Eigen3
        id: cache_restore_eigen3
        uses: actions/cache/restore@v4
        with:
          path: "${{github.workspace}}/${{ env.INTSTALL_ROOT_DIR }}/${{ needs.build_eigen3.outputs.dirname }}"
          key: ${{ needs.build_eigen3.outputs.cache_key }}
    
      - name: Fail if cache does not exist
        shell: pwsh
        if: steps.cache_restore_eigen3.outputs.cache-hit != 'true'
        run: |
          Write-Output "Cache not found: ${{ needs.build_eigen3.outputs.cache_key }}"
          exit 1
